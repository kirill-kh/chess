uniform sampler2D tex;
uniform int TheColor;

varying vec3 n;
varying vec3 v;
varying vec2 texcoord;

void main()
{
	vec4 color = vec4(0,0,0,1);
	vec3 attenuation = vec3(0.5,00.5,0001);
for (int li = 0; li <2; ++li)
{
	 vec3 l;
		
        if (gl_LightSource[0].position.w != 0.0)
        {
            l = normalize(gl_LightSource[li].position.xyz - v);
        }
        else
        {
            l = normalize(gl_LightSource[li].position.xyz);
        }
        vec3 e = normalize(-v);
        vec3 r = normalize(-reflect(l, n));

	if (TheColor == 0)
	{
		color = texture2D(tex, texcoord);
		 vec4 Iamb = color;
 
        vec4 Idiff = color*0.6 * max(dot(n, l), 0.0);
        Idiff = clamp(Idiff, 0.0, 1.0);
 
        vec4 Ispec = gl_FrontMaterial.specular * pow(max(dot(r, e), 0.0),
                           gl_FrontMaterial.shininess);
        Ispec = clamp(Ispec, 0.0, 1.0);

        color = Iamb + Idiff + Ispec;
	}

	if (TheColor == 1) 
	{
		
 
        vec4 Iamb = gl_FrontMaterial.ambient;
 
        vec4 Idiff = gl_FrontMaterial.diffuse * max(dot(n, l), 0.0);
        Idiff = clamp(Idiff, 0.0, 1.0);
 
        vec4 Ispec = gl_FrontMaterial.specular * pow(max(dot(r, e), 0.0),
                           gl_FrontMaterial.shininess);
        Ispec = clamp(Ispec, 0.0, 1.0);

        color += Iamb + Idiff + Ispec;
	}
}
		
	gl_FragColor = color/1.6;
}